{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BRV \u00b6 \u53ef\u80fd\u662f\u6700\u5f3a\u5927\u7684RecyclerView\u6846\u67b6 \u4f7f\u7528\u6587\u6863 \u7279\u70b9 \u00b6 \u7b80\u6d01\u4ee3\u7801 \u529f\u80fd\u5168\u9762 \u6587\u6863\u8be6\u7ec6 \u975e\u4fb5\u5165\u5f0f \u4e0d\u521b\u5efa\u4efb\u4f55\u6587\u4ef6 \u5237\u65b0\u4e0d\u95ea\u5c4f \u6570\u636e\u53cc\u5411\u7ed1\u5b9a DSL\u4f5c\u7528\u57df \u9ad8\u6269\u5c55\u6027 \u529f\u80fd \u00b6 \u591a\u7c7b\u578b \u5355\u4e00\u6570\u636e\u6a21\u578b\u4e00\u5bf9\u591a \u591a\u6570\u636e\u6a21\u578b \u6dfb\u52a0\u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40 \u70b9\u51fb(\u9632\u6296\u52a8)/\u957f\u6309\u4e8b\u4ef6 \u5206\u7ec4(\u5c55\u5f00\u6298\u53e0/\u9012\u5f52\u5c42\u6b21/\u5c55\u5f00\u7f6e\u9876) \u60ac\u505c \u5206\u5272\u7ebf/\u5747\u5e03\u95f4\u9694(\u652f\u6301\u5b98\u65b9\u5168\u90e8\u7684 LayoutManager ) \u5207\u6362\u6a21\u5f0f \u9009\u62e9\u6a21\u5f0f(\u591a\u9009/\u5355\u9009/\u5168\u9009/\u53d6\u6d88\u5168\u9009/\u53cd\u9009) \u62d6\u62fd\u4f4d\u7f6e \u4fa7\u6ed1\u5220\u9664 \u4e0b\u62c9\u5237\u65b0 | \u4e0a\u62c9\u52a0\u8f7d, \u6269\u5c55SmartRefreshLayout\u5373\u517c\u5bb9\u5176\u6240\u6709\u529f\u80fd \u9884\u62c9\u53d6\u7d22\u5f15(UpFetch) | \u9884\u52a0\u8f7d\u7d22\u5f15(Preload) \u7f3a\u7701\u9875 \u81ea\u52a8\u5206\u9875\u52a0\u8f7d \u4f38\u7f29\u5e03\u5c40 ( FlexboxLayoutManager ) \u53ef\u6269\u5c55\u81ea\u52a8\u5316\u7f51\u7edc\u8bf7\u6c42 ( Net ), \u8be5\u7f51\u7edc\u8bf7\u6c42\u57fa\u4e8e\u534f\u7a0b\u5b9e\u73b0\u81ea\u52a8\u5316\u7684\u5e76\u53d1\u7f51\u7edc\u8bf7\u6c42 \u5212\u52a8\u591a\u9009 \u65e0\u9650\u5212\u52a8 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u7684 build.gradle \u6dfb\u52a0\u4ed3\u5e93 allprojects { repositories { // ... maven { url 'https://jitpack.io' } } } \u5728 module \u7684 build.gradle \u6dfb\u52a0\u4f9d\u8d56 implementation 'com.github.liangjingkanji:BRV:1.3.6' MIT \u00b6 Copyright (C) 2018 Drake, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"\u4ecb\u7ecd"},{"location":"#brv","text":"\u53ef\u80fd\u662f\u6700\u5f3a\u5927\u7684RecyclerView\u6846\u67b6 \u4f7f\u7528\u6587\u6863","title":"BRV"},{"location":"#_1","text":"\u7b80\u6d01\u4ee3\u7801 \u529f\u80fd\u5168\u9762 \u6587\u6863\u8be6\u7ec6 \u975e\u4fb5\u5165\u5f0f \u4e0d\u521b\u5efa\u4efb\u4f55\u6587\u4ef6 \u5237\u65b0\u4e0d\u95ea\u5c4f \u6570\u636e\u53cc\u5411\u7ed1\u5b9a DSL\u4f5c\u7528\u57df \u9ad8\u6269\u5c55\u6027","title":"\u7279\u70b9"},{"location":"#_2","text":"\u591a\u7c7b\u578b \u5355\u4e00\u6570\u636e\u6a21\u578b\u4e00\u5bf9\u591a \u591a\u6570\u636e\u6a21\u578b \u6dfb\u52a0\u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40 \u70b9\u51fb(\u9632\u6296\u52a8)/\u957f\u6309\u4e8b\u4ef6 \u5206\u7ec4(\u5c55\u5f00\u6298\u53e0/\u9012\u5f52\u5c42\u6b21/\u5c55\u5f00\u7f6e\u9876) \u60ac\u505c \u5206\u5272\u7ebf/\u5747\u5e03\u95f4\u9694(\u652f\u6301\u5b98\u65b9\u5168\u90e8\u7684 LayoutManager ) \u5207\u6362\u6a21\u5f0f \u9009\u62e9\u6a21\u5f0f(\u591a\u9009/\u5355\u9009/\u5168\u9009/\u53d6\u6d88\u5168\u9009/\u53cd\u9009) \u62d6\u62fd\u4f4d\u7f6e \u4fa7\u6ed1\u5220\u9664 \u4e0b\u62c9\u5237\u65b0 | \u4e0a\u62c9\u52a0\u8f7d, \u6269\u5c55SmartRefreshLayout\u5373\u517c\u5bb9\u5176\u6240\u6709\u529f\u80fd \u9884\u62c9\u53d6\u7d22\u5f15(UpFetch) | \u9884\u52a0\u8f7d\u7d22\u5f15(Preload) \u7f3a\u7701\u9875 \u81ea\u52a8\u5206\u9875\u52a0\u8f7d \u4f38\u7f29\u5e03\u5c40 ( FlexboxLayoutManager ) \u53ef\u6269\u5c55\u81ea\u52a8\u5316\u7f51\u7edc\u8bf7\u6c42 ( Net ), \u8be5\u7f51\u7edc\u8bf7\u6c42\u57fa\u4e8e\u534f\u7a0b\u5b9e\u73b0\u81ea\u52a8\u5316\u7684\u5e76\u53d1\u7f51\u7edc\u8bf7\u6c42 \u5212\u52a8\u591a\u9009 \u65e0\u9650\u5212\u52a8 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u7684 build.gradle \u6dfb\u52a0\u4ed3\u5e93 allprojects { repositories { // ... maven { url 'https://jitpack.io' } } } \u5728 module \u7684 build.gradle \u6dfb\u52a0\u4f9d\u8d56 implementation 'com.github.liangjingkanji:BRV:1.3.6'","title":"\u529f\u80fd"},{"location":"#mit","text":"Copyright (C) 2018 Drake, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT"},{"location":"checked/","text":"\u793a\u4f8b \u00b6 \u51fd\u6570 \u00b6 fun allChecked () // \u5168\u9009 fun allChecked ( isAllChecked : Boolean ) // \u5168\u9009\u6216\u8005\u5168\u90e8\u53d6\u6d88\u5168\u9009 fun clearChecked () // \u53d6\u6d88\u5168\u9009 fun reverseChecked () // \u53cd\u9009 fun setChecked ( @IntRange ( from = 0 ) position : Int , checked : Boolean ) // \u8bbe\u7f6e\u67d0\u4e2aitem\u7684\u9009\u62e9\u72b6\u6001 fun toggleChecked ( @IntRange ( from = 0 ) position : Int ) // \u5207\u6362\u67d0\u4e2aitem\u7684\u9009\u62e9\u72b6\u6001 fun < M > getCheckedModels (): List < M > fun setCheckableType ( @LayoutRes vararg checkableItemType : Int ) // \u8bbe\u7f6e\u54ea\u4e9btype\u5141\u8bb8\u8fdb\u5165\u9009\u62e9\u72b6\u6001 val checkedCount : Int","title":"\u9009\u62e9\u6a21\u5f0f"},{"location":"checked/#_1","text":"","title":"\u793a\u4f8b"},{"location":"checked/#_2","text":"fun allChecked () // \u5168\u9009 fun allChecked ( isAllChecked : Boolean ) // \u5168\u9009\u6216\u8005\u5168\u90e8\u53d6\u6d88\u5168\u9009 fun clearChecked () // \u53d6\u6d88\u5168\u9009 fun reverseChecked () // \u53cd\u9009 fun setChecked ( @IntRange ( from = 0 ) position : Int , checked : Boolean ) // \u8bbe\u7f6e\u67d0\u4e2aitem\u7684\u9009\u62e9\u72b6\u6001 fun toggleChecked ( @IntRange ( from = 0 ) position : Int ) // \u5207\u6362\u67d0\u4e2aitem\u7684\u9009\u62e9\u72b6\u6001 fun < M > getCheckedModels (): List < M > fun setCheckableType ( @LayoutRes vararg checkableItemType : Int ) // \u8bbe\u7f6e\u54ea\u4e9btype\u5141\u8bb8\u8fdb\u5165\u9009\u62e9\u72b6\u6001 val checkedCount : Int","title":"\u51fd\u6570"},{"location":"divider/","text":"\u5206\u5272\u7ebf \u00b6 \u5782\u76f4\u5217\u8868\u7684\u5206\u5272\u7ebf rv_grid . linear (). divider ( R . drawable . divider_horizontal ). setup { addType < StaggeredModel >( R . layout . item_staggered ) }. models = getData () [R.drawable.divider_horizontal] <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" > <solid android:color= \"@color/colorAccent\" /> <size android:width= \"30px\" android:height= \"10px\" /> </shape> \u914d\u7f6e\u95f4\u8ddd \u00b6 rv_grid . divider { orientation = Orientation . VERTICAL // \u5206\u5272\u7ebf\u65b9\u5411 setColorRes ( R . color . dividerDecoration ) // \u5206\u5272\u7ebf\u989c\u8272 setDivider ( 30 , true ) // \u5206\u9694\u7ebf\u4e3a30dp startVisible = true // \u5217\u8868\u5934\u90e8\u662f\u5426\u663e\u793a\u5206\u5272\u7ebf endVisible = true // \u5217\u8868\u5c3e\u90e8\u662f\u5426\u663e\u793a\u5206\u5272\u7ebf }. setup { addType < StaggeredModel >( R . layout . item_staggered ) }. models = getData () \u51fd\u6570 \u00b6 RecyclerUtils \u5de5\u5177\u63d0\u4f9b\u6269\u5c55\u51fd\u6570\u5feb\u901f\u521b\u5efa\u5e38\u7528\u7684\u5206\u5272\u7ebf fun RecyclerView . dividerColorRes ( @ColorRes color : Int , // \u5206\u5272\u7ebf\u989c\u8272 marginStart : Int = 0 , // \u5de6\u8fb9\u95f4\u8ddd marginEnd : Int = 0 , // \u53f3\u8fb9\u95f4\u8ddd width : Int = 1 // \u5206\u5272\u7ebf\u7684\u5bbd\u5ea6 ): RecyclerView // \u901a\u8fc7\u989c\u8272\u8d44\u6e90\u8bbe\u7f6e\u6c34\u5e73\u5206\u5272\u7ebf fun RecyclerView . dividerColor ( color : String , // 16\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32 marginStart : Int = 0 , marginEnd : Int = 0 , width : Int = 1 ): RecyclerView // \u540c\u4e0a fun RecyclerView . dividerColor ( @ColorInt color : Int , // \u989c\u8272\u5e38\u91cf\u503c, \u4f8b\u5982Color.RED marginStart : Int = 0 , marginEnd : Int = 0 , width : Int = 1 ): RecyclerView // \u540c\u4e0a fun RecyclerView . divider ( @DrawableRes drawable : Int // Drawable\u8d44\u6e90 ): RecyclerView // \u901a\u8fc7Drawable\u8d44\u6e90\u6765\u8bbe\u7f6e\u5206\u5272\u7ebf, Drawable\u7684\u5bbd\u9ad8\u51b3\u5b9a\u5206\u5272\u7ebf\u7684\u5bbd\u9ad8 fun RecyclerView . divider ( block : DefaultDecoration .() -> Unit ): RecyclerView // \u5728\u56de\u8c03\u51fd\u6570\u4e2d\u914d\u7f6e\u5206\u5272\u7ebf \u6269\u5c55\u51fd\u6570\u90fd\u662f\u521b\u5efa DefaultDecoration \u5bf9\u8c61\u6765\u8fdb\u884c\u914d\u7f6e \u67e5\u770b\u6e90\u7801\u53ef\u89c1 fun RecyclerView . divider ( @DrawableRes drawable : Int ): RecyclerView { return divider { setDrawable ( drawable ) } }","title":"\u5206\u5272\u7ebf"},{"location":"divider/#_1","text":"\u5782\u76f4\u5217\u8868\u7684\u5206\u5272\u7ebf rv_grid . linear (). divider ( R . drawable . divider_horizontal ). setup { addType < StaggeredModel >( R . layout . item_staggered ) }. models = getData () [R.drawable.divider_horizontal] <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" > <solid android:color= \"@color/colorAccent\" /> <size android:width= \"30px\" android:height= \"10px\" /> </shape>","title":"\u5206\u5272\u7ebf"},{"location":"divider/#_2","text":"rv_grid . divider { orientation = Orientation . VERTICAL // \u5206\u5272\u7ebf\u65b9\u5411 setColorRes ( R . color . dividerDecoration ) // \u5206\u5272\u7ebf\u989c\u8272 setDivider ( 30 , true ) // \u5206\u9694\u7ebf\u4e3a30dp startVisible = true // \u5217\u8868\u5934\u90e8\u662f\u5426\u663e\u793a\u5206\u5272\u7ebf endVisible = true // \u5217\u8868\u5c3e\u90e8\u662f\u5426\u663e\u793a\u5206\u5272\u7ebf }. setup { addType < StaggeredModel >( R . layout . item_staggered ) }. models = getData ()","title":"\u914d\u7f6e\u95f4\u8ddd"},{"location":"divider/#_3","text":"RecyclerUtils \u5de5\u5177\u63d0\u4f9b\u6269\u5c55\u51fd\u6570\u5feb\u901f\u521b\u5efa\u5e38\u7528\u7684\u5206\u5272\u7ebf fun RecyclerView . dividerColorRes ( @ColorRes color : Int , // \u5206\u5272\u7ebf\u989c\u8272 marginStart : Int = 0 , // \u5de6\u8fb9\u95f4\u8ddd marginEnd : Int = 0 , // \u53f3\u8fb9\u95f4\u8ddd width : Int = 1 // \u5206\u5272\u7ebf\u7684\u5bbd\u5ea6 ): RecyclerView // \u901a\u8fc7\u989c\u8272\u8d44\u6e90\u8bbe\u7f6e\u6c34\u5e73\u5206\u5272\u7ebf fun RecyclerView . dividerColor ( color : String , // 16\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32 marginStart : Int = 0 , marginEnd : Int = 0 , width : Int = 1 ): RecyclerView // \u540c\u4e0a fun RecyclerView . dividerColor ( @ColorInt color : Int , // \u989c\u8272\u5e38\u91cf\u503c, \u4f8b\u5982Color.RED marginStart : Int = 0 , marginEnd : Int = 0 , width : Int = 1 ): RecyclerView // \u540c\u4e0a fun RecyclerView . divider ( @DrawableRes drawable : Int // Drawable\u8d44\u6e90 ): RecyclerView // \u901a\u8fc7Drawable\u8d44\u6e90\u6765\u8bbe\u7f6e\u5206\u5272\u7ebf, Drawable\u7684\u5bbd\u9ad8\u51b3\u5b9a\u5206\u5272\u7ebf\u7684\u5bbd\u9ad8 fun RecyclerView . divider ( block : DefaultDecoration .() -> Unit ): RecyclerView // \u5728\u56de\u8c03\u51fd\u6570\u4e2d\u914d\u7f6e\u5206\u5272\u7ebf \u6269\u5c55\u51fd\u6570\u90fd\u662f\u521b\u5efa DefaultDecoration \u5bf9\u8c61\u6765\u8fdb\u884c\u914d\u7f6e \u67e5\u770b\u6e90\u7801\u53ef\u89c1 fun RecyclerView . divider ( @DrawableRes drawable : Int ): RecyclerView { return divider { setDrawable ( drawable ) } }","title":"\u51fd\u6570"},{"location":"drag_swipe/","text":"\u62d6\u62fd/\u4fa7\u6ed1 \u00b6 \u53ea\u652f\u6301\u62d6\u62fd\u79fb\u52a8\u548c\u4fa7\u6ed1\u5220\u9664 \u6b65\u9aa4: \u5f00\u542f ItemTouchHelper \u652f\u6301 \u6570\u636e\u6a21\u578b\u7ee7\u627f ItemModel \u81ea\u5b9a\u4e49\u6269\u5c55 BindingAdapter\u63d0\u4f9b\u4e00\u4e2a\u5b57\u6bb5\u6765\u5f00\u542fItemTouchHelper\u652f\u6301 var touchEnable = false // \u9ed8\u8ba4\u5173\u95ed \u7136\u540e\u6570\u636e\u6a21\u578b\u8981\u6c42\u7ee7\u627f ItemModel , \u6839\u636e\u9700\u6c42\u91cd\u5199\u51fd\u6570. \u793a\u4f8b: data class Model ( val name : String ) : ItemModel () { override fun getDrag (): Int { return UP or DOWN } override fun getSwipe (): Int { return RIGHT or LEFT } } RIGHT or LEFT \u662f\u63a7\u5236\u62d6\u62fd\u548c\u4fa7\u6ed1\u7684\u65b9\u5411(\u4fa7\u6ed1\u4e0d\u652f\u6301UP/DOWN)\u7684\u5e38\u91cf. \u62d6\u62fd\u79fb\u52a8item\u4f1a\u81ea\u52a8\u6539\u53d8\u6570\u636e\u6a21\u578b\u5728\u6570\u636e\u96c6\u5408\u4e2d\u7684\u4f4d\u7f6e. \u6269\u5c55\u529f\u80fd \u5982\u679c\u60f3\u8981\u6269\u5c55ItemTouchHelper\u53ef\u4ee5\u7ed9BindingAdapter\u7684\u53d8\u91cf itemTouchHelper \u8d4b\u503c rv . linear (). setup { addType < Model >( R . layout . item ) touchEnable = true itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback ( this ) { // \u8fd9\u91cc\u53ef\u4ee5\u91cd\u5199\u51fd\u6570 }) }. models = data \u901a\u8fc7\u7ed9view\u6253\u4e0atag\u6807\u7b7e swipe \u53ef\u4ee5\u63a7\u5236\u4fa7\u6ed1\u5c06\u4f1a\u79fb\u52a8\u7684\u89c6\u56fe. <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"80dp\" android:orientation= \"horizontal\" android:tag= \"swipe\" />","title":"\u62d6\u62fd/\u4fa7\u6ed1"},{"location":"drag_swipe/#_1","text":"\u53ea\u652f\u6301\u62d6\u62fd\u79fb\u52a8\u548c\u4fa7\u6ed1\u5220\u9664 \u6b65\u9aa4: \u5f00\u542f ItemTouchHelper \u652f\u6301 \u6570\u636e\u6a21\u578b\u7ee7\u627f ItemModel \u81ea\u5b9a\u4e49\u6269\u5c55 BindingAdapter\u63d0\u4f9b\u4e00\u4e2a\u5b57\u6bb5\u6765\u5f00\u542fItemTouchHelper\u652f\u6301 var touchEnable = false // \u9ed8\u8ba4\u5173\u95ed \u7136\u540e\u6570\u636e\u6a21\u578b\u8981\u6c42\u7ee7\u627f ItemModel , \u6839\u636e\u9700\u6c42\u91cd\u5199\u51fd\u6570. \u793a\u4f8b: data class Model ( val name : String ) : ItemModel () { override fun getDrag (): Int { return UP or DOWN } override fun getSwipe (): Int { return RIGHT or LEFT } } RIGHT or LEFT \u662f\u63a7\u5236\u62d6\u62fd\u548c\u4fa7\u6ed1\u7684\u65b9\u5411(\u4fa7\u6ed1\u4e0d\u652f\u6301UP/DOWN)\u7684\u5e38\u91cf. \u62d6\u62fd\u79fb\u52a8item\u4f1a\u81ea\u52a8\u6539\u53d8\u6570\u636e\u6a21\u578b\u5728\u6570\u636e\u96c6\u5408\u4e2d\u7684\u4f4d\u7f6e. \u6269\u5c55\u529f\u80fd \u5982\u679c\u60f3\u8981\u6269\u5c55ItemTouchHelper\u53ef\u4ee5\u7ed9BindingAdapter\u7684\u53d8\u91cf itemTouchHelper \u8d4b\u503c rv . linear (). setup { addType < Model >( R . layout . item ) touchEnable = true itemTouchHelper = ItemTouchHelper ( object : DefaultItemTouchCallback ( this ) { // \u8fd9\u91cc\u53ef\u4ee5\u91cd\u5199\u51fd\u6570 }) }. models = data \u901a\u8fc7\u7ed9view\u6253\u4e0atag\u6807\u7b7e swipe \u53ef\u4ee5\u63a7\u5236\u4fa7\u6ed1\u5c06\u4f1a\u79fb\u52a8\u7684\u89c6\u56fe. <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"80dp\" android:orientation= \"horizontal\" android:tag= \"swipe\" />","title":"\u62d6\u62fd/\u4fa7\u6ed1"},{"location":"flexbox/","text":"\u8981\u6c42\u914d\u548cGoogle\u7684\u5f00\u6e90\u9879\u76ee flexbox-layout \u6dfb\u52a0\u4f9d\u8d56 dependencies { implementation 'com.google.android:flexbox:2.0.1' } \u7136\u540e\u521b\u5efa\u5217\u8868 rv . layoutManager = FlexboxLayoutManager ( activity ) rv . setup { addType < FlexTagModel >( R . layout . item_flex_tag ) }. models = getData ()","title":"\u4f38\u7f29\u5e03\u5c40"},{"location":"group/","text":"\u4f7f\u7528 \u00b6 \u5206\u7ec4\u8981\u6c42Model\u5b9e\u73b0 ItemExpand class GroupModel : ItemExpand { // \u540c\u7ea7\u522b\u5206\u7ec4\u7684\u7d22\u5f15\u4f4d\u7f6e override var itemGroupPosition : Int = 0 // \u5f53\u524d\u6761\u76ee\u662f\u5426\u5c55\u5f00 override var itemExpand : Boolean = false // \u8be5\u53d8\u91cf\u5b58\u50a8\u5b50\u5217\u8868 override var itemSublist : List < Any ?>? = listOf ( Model (), Model (), Model (), Model ()) } \u53ef\u80fd\u4f60\u7684\u6570\u636e\u7ed3\u6784\u4e0d\u5b58\u5728 \u521b\u5efa\u5217\u8868 rv_group . linear (). setup { // \u4efb\u4f55\u6761\u76ee\u90fd\u9700\u8981\u6dfb\u52a0\u7c7b\u578b\u5230BindingAdapter\u4e2d addType < GroupModel >( R . layout . item_group_title ) addFastClickable ( R . id . item ) // \u5c55\u5f00\u548c\u6298\u53e0\u70b9\u51fb\u4e8b\u4ef6\u4e0d\u9700\u8981\u9632\u6296\u52a8, \u6240\u4ee5\u4f7f\u7528\u8be5\u51fd\u6570 onClick { expandOrCollapse () // \u5c55\u5f00\u6216\u8005\u6298\u53e0 } }. models = getData () \u51fd\u6570 \u00b6 BindingAdapter \u63a7\u5236\u5c55\u5f00\u548c\u6298\u53e0 var expandAnimationEnabled = true // \u5c55\u5f00\u6298\u53e0\u662f\u5426\u5b58\u5728\u52a8\u753b var singleExpandMode = false // \u662f\u5426\u53ea\u5141\u8bb8\u4e00\u4e2a\u5206\u7ec4\u5c55\u5f00(\u5373\u5c55\u5f00\u5f53\u524d\u5206\u7ec4\u5c31\u6298\u53e0\u4e0a\u4e2a\u5206\u7ec4) fun onExpand ( block : BindingViewHolder .( Boolean ) -> Unit ) // \u5c55\u5f00\u56de\u8c03\u76d1\u542c fun expand ( @IntRange ( from = 0 ) position : Int , // \u6307\u5b9a\u6761\u76ee\u4f4d\u7f6e scrollTop : Boolean = false , // \u5c55\u5f00\u540e\u662f\u5426\u5728\u5217\u8868\u4e2d\u79fb\u52a8\u7f6e\u9876\u5f53\u524d\u6761\u76ee @IntRange ( from = - 1 ) depth : Int = 0 // \u9012\u5f52\u7ea7\u522b, -1 \u8868\u793a\u5c55\u5f00\u5f53\u524d\u6761\u76ee\u7684\u6240\u6709\u5b50\u5217\u8868 ): Int // \u5c55\u5f00\u6307\u5b9a\u6761\u76ee fun collapse ( @IntRange ( from = 0 ) position : Int , @IntRange ( from = - 1 ) depth : Int = 0 ): Int // \u6298\u53e0\u6307\u5b9a\u6761\u76ee fun expandOrCollapse ( @IntRange ( from = 0 ) position : Int , scrollTop : Boolean = false , @IntRange ( from = - 1 ) depth : Int = 0 ): Int // \u5c55\u5f00\u6216\u8005\u6298\u53e0\u6307\u5b9a\u6761\u76ee(\u6839\u636e\u5f53\u524d\u6761\u76ee\u72b6\u6001\u51b3\u5b9a\u662f\u6298\u53e0/\u5c55\u5f00)","title":"\u5206\u7ec4"},{"location":"group/#_1","text":"\u5206\u7ec4\u8981\u6c42Model\u5b9e\u73b0 ItemExpand class GroupModel : ItemExpand { // \u540c\u7ea7\u522b\u5206\u7ec4\u7684\u7d22\u5f15\u4f4d\u7f6e override var itemGroupPosition : Int = 0 // \u5f53\u524d\u6761\u76ee\u662f\u5426\u5c55\u5f00 override var itemExpand : Boolean = false // \u8be5\u53d8\u91cf\u5b58\u50a8\u5b50\u5217\u8868 override var itemSublist : List < Any ?>? = listOf ( Model (), Model (), Model (), Model ()) } \u53ef\u80fd\u4f60\u7684\u6570\u636e\u7ed3\u6784\u4e0d\u5b58\u5728 \u521b\u5efa\u5217\u8868 rv_group . linear (). setup { // \u4efb\u4f55\u6761\u76ee\u90fd\u9700\u8981\u6dfb\u52a0\u7c7b\u578b\u5230BindingAdapter\u4e2d addType < GroupModel >( R . layout . item_group_title ) addFastClickable ( R . id . item ) // \u5c55\u5f00\u548c\u6298\u53e0\u70b9\u51fb\u4e8b\u4ef6\u4e0d\u9700\u8981\u9632\u6296\u52a8, \u6240\u4ee5\u4f7f\u7528\u8be5\u51fd\u6570 onClick { expandOrCollapse () // \u5c55\u5f00\u6216\u8005\u6298\u53e0 } }. models = getData ()","title":"\u4f7f\u7528"},{"location":"group/#_2","text":"BindingAdapter \u63a7\u5236\u5c55\u5f00\u548c\u6298\u53e0 var expandAnimationEnabled = true // \u5c55\u5f00\u6298\u53e0\u662f\u5426\u5b58\u5728\u52a8\u753b var singleExpandMode = false // \u662f\u5426\u53ea\u5141\u8bb8\u4e00\u4e2a\u5206\u7ec4\u5c55\u5f00(\u5373\u5c55\u5f00\u5f53\u524d\u5206\u7ec4\u5c31\u6298\u53e0\u4e0a\u4e2a\u5206\u7ec4) fun onExpand ( block : BindingViewHolder .( Boolean ) -> Unit ) // \u5c55\u5f00\u56de\u8c03\u76d1\u542c fun expand ( @IntRange ( from = 0 ) position : Int , // \u6307\u5b9a\u6761\u76ee\u4f4d\u7f6e scrollTop : Boolean = false , // \u5c55\u5f00\u540e\u662f\u5426\u5728\u5217\u8868\u4e2d\u79fb\u52a8\u7f6e\u9876\u5f53\u524d\u6761\u76ee @IntRange ( from = - 1 ) depth : Int = 0 // \u9012\u5f52\u7ea7\u522b, -1 \u8868\u793a\u5c55\u5f00\u5f53\u524d\u6761\u76ee\u7684\u6240\u6709\u5b50\u5217\u8868 ): Int // \u5c55\u5f00\u6307\u5b9a\u6761\u76ee fun collapse ( @IntRange ( from = 0 ) position : Int , @IntRange ( from = - 1 ) depth : Int = 0 ): Int // \u6298\u53e0\u6307\u5b9a\u6761\u76ee fun expandOrCollapse ( @IntRange ( from = 0 ) position : Int , scrollTop : Boolean = false , @IntRange ( from = - 1 ) depth : Int = 0 ): Int // \u5c55\u5f00\u6216\u8005\u6298\u53e0\u6307\u5b9a\u6761\u76ee(\u6839\u636e\u5f53\u524d\u6761\u76ee\u72b6\u6001\u51b3\u5b9a\u662f\u6298\u53e0/\u5c55\u5f00)","title":"\u51fd\u6570"},{"location":"header_footer/","text":"\u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40\u5728rv\u4e2d\u7b97\u4f5c\u4e00\u4e2aitem, \u6240\u4ee5\u8ba1\u7b97 position \u7684\u65f6\u5019\u5e94\u5f53\u8003\u8651\u5176\u4e2d \u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40\u4e5f\u9700\u8981\u4f7f\u7528 addType \u51fd\u6570\u6dfb\u52a0\u7c7b\u578b \u51fd\u6570 \u00b6 \u64cd\u4f5c\u5934\u5e03\u5c40 fun addHeader ( model : Any ?, @IntRange ( from = - 1 ) index : Int = - 1 , animation : Boolean = false ) // \u6dfb\u52a0\u5934\u5e03\u5c40 // index: \u6dfb\u52a0\u5230\u7b2c\u51e0\u4e2a\u5934\u5e03\u5c40 // animation: \u6dfb\u52a0\u65f6\u662f\u5426\u6709\u5217\u8868\u52a8\u753b fun removeHeader ( model : Any ?, animation : Boolean = false ) // \u5220\u9664\u5bf9\u5e94\u6570\u636e\u6a21\u578b\u7684\u5934\u5e03\u5c40 fun removeHeaderAt ( @IntRange ( from = 0 ) index : Int = 0 , animation : Boolean = false ) // \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5934\u5e03\u5c40 fun clearHeader ( animation : Boolean = false ) // \u6e05\u9664\u6240\u6709\u5934\u5e03\u5c40 fun isHeader ( @IntRange ( from = 0 ) position : Int ): Boolean // \u5f53\u524dposition\u662f\u5426\u5c5e\u4e8e\u5934\u5e03\u5c40 val headerCount : Int // \u5f53\u524d\u5934\u5e03\u5c40\u7684\u6570\u91cf \u64cd\u4f5c\u811a\u5e03\u5c40 fun addFooter ( model : Any ?, @IntRange ( from = - 1 ) index : Int = - 1 , animation : Boolean = false ) fun removeFooter ( model : Any ?, animation : Boolean = false ) fun removeFooterAt ( @IntRange ( from = - 1 ) index : Int = - 1 , animation : Boolean = false ) fun clearFooter ( animation : Boolean = false ) fun isFooter ( @IntRange ( from = 0 ) position : Int ): Boolean val footerCount : Int","title":"\u5934\u811a\u5e03\u5c40"},{"location":"header_footer/#_1","text":"\u64cd\u4f5c\u5934\u5e03\u5c40 fun addHeader ( model : Any ?, @IntRange ( from = - 1 ) index : Int = - 1 , animation : Boolean = false ) // \u6dfb\u52a0\u5934\u5e03\u5c40 // index: \u6dfb\u52a0\u5230\u7b2c\u51e0\u4e2a\u5934\u5e03\u5c40 // animation: \u6dfb\u52a0\u65f6\u662f\u5426\u6709\u5217\u8868\u52a8\u753b fun removeHeader ( model : Any ?, animation : Boolean = false ) // \u5220\u9664\u5bf9\u5e94\u6570\u636e\u6a21\u578b\u7684\u5934\u5e03\u5c40 fun removeHeaderAt ( @IntRange ( from = 0 ) index : Int = 0 , animation : Boolean = false ) // \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5934\u5e03\u5c40 fun clearHeader ( animation : Boolean = false ) // \u6e05\u9664\u6240\u6709\u5934\u5e03\u5c40 fun isHeader ( @IntRange ( from = 0 ) position : Int ): Boolean // \u5f53\u524dposition\u662f\u5426\u5c5e\u4e8e\u5934\u5e03\u5c40 val headerCount : Int // \u5f53\u524d\u5934\u5e03\u5c40\u7684\u6570\u91cf \u64cd\u4f5c\u811a\u5e03\u5c40 fun addFooter ( model : Any ?, @IntRange ( from = - 1 ) index : Int = - 1 , animation : Boolean = false ) fun removeFooter ( model : Any ?, animation : Boolean = false ) fun removeFooterAt ( @IntRange ( from = - 1 ) index : Int = - 1 , animation : Boolean = false ) fun clearFooter ( animation : Boolean = false ) fun isFooter ( @IntRange ( from = 0 ) position : Int ): Boolean val footerCount : Int","title":"\u51fd\u6570"},{"location":"hover/","text":"\u901a\u8fc7\u5b9e\u73b0\u63a5\u53e3 ItemHover class HoverHeaderModel : ItemHover { override var itemHover : Boolean = true } \u7136\u540e\u8fd9\u4e2aItem\u5c31\u4f1a\u60ac\u505c\u5728\u9876\u90e8\u4e86 \u5b8c\u6574\u793a\u4f8b override fun onActivityCreated ( savedInstanceState : Bundle ?) { super . onActivityCreated ( savedInstanceState ) rv_hover . linear (). setup { addType < Model >( R . layout . item_multi_type_simple ) addType < HoverHeaderModel >( R . layout . item_hover_header ) models = getData () // \u70b9\u51fb\u4e8b\u4ef6 onClick ( R . id . item ) { when ( itemViewType ) { R . layout . item_hover_header -> toast ( \"\u60ac\u505c\u6761\u76ee\" ) else -> toast ( \"\u666e\u901a\u6761\u76ee\" ) } } // \u53ef\u9009\u9879, \u7c98\u6027\u76d1\u542c\u5668 onHoverAttachListener = object : OnHoverAttachListener { // \u9ecf\u4f4f\u9876\u90e8\u7684\u65f6\u5019 override fun attachHover ( v : View ) { ViewCompat . setElevation ( v , 10F ) } // \u4ece\u9876\u90e8\u5206\u79bb\u7684\u65f6\u5019 override fun detachHover ( v : View ) { ViewCompat . setElevation ( v , 0F ) } } } } \u5224\u65ad\u5f53\u524d\u4f4d\u7f6e\u662f\u5426\u5c5e\u4e8e\u60ac\u505c fun isHover ( position : Int ): Boolean","title":"\u60ac\u505c"},{"location":"ktx/","text":"LayoutManager \u00b6 \u6846\u67b6\u8fd8\u63d0\u4f9b\u5feb\u901f\u521b\u5efa\u5e03\u5c40\u7ba1\u7406\u5668\u7684\u6269\u5c55\u51fd\u6570, \u4e0a\u9762\u4f7f\u7528\u793a\u4f8b rv . linear (). setup { } \u51fd\u6570 fun RecyclerView . linear ( @RecyclerView . Orientation orientation : Int = VERTICAL , reverseLayout : Boolean = false ) fun RecyclerView . grid ( spanCount : Int , @RecyclerView . Orientation orientation : Int = VERTICAL , reverseLayout : Boolean = false ) fun RecyclerView . staggered ( spanCount : Int , @RecyclerView . Orientation orientation : Int = VERTICAL ) \u5206\u9694\u7269 \u00b6 \u6846\u67b6\u63d0\u4f9b\u5feb\u901f\u8bbe\u7f6e\u5206\u9694\u7269\u6269\u5c55\u51fd\u6570 fun RecyclerView . divider ( @DrawableRes drawable : Int , // \u5206\u9694\u7269Drawable @RecyclerView . Orientation orientation : Int = RecyclerView . VERTICAL , // LayoutManager\u7684\u65b9\u5411 block : (( Rect , View , RecyclerView , RecyclerView . State ) -> Boolean )? = null // getItemOffset\u56de\u8c03\u7528\u4e8e\u8bbe\u7f6e\u95f4\u9694 ) \u793a\u4f8b rv . linear (). divider ( R . drawable . divider_horizontal_padding_15dp ). setup { } \u5bf9\u8bdd\u6846 \u00b6 \u901a\u8fc7\u6269\u5c55\u51fd\u6570\u5feb\u901f\u7ed9\u5bf9\u8bdd\u6846\u521b\u5efa\u5217\u8868 Dialog(context).setAdapter(bindingAdapter)","title":"\u5feb\u6377\u51fd\u6570"},{"location":"ktx/#layoutmanager","text":"\u6846\u67b6\u8fd8\u63d0\u4f9b\u5feb\u901f\u521b\u5efa\u5e03\u5c40\u7ba1\u7406\u5668\u7684\u6269\u5c55\u51fd\u6570, \u4e0a\u9762\u4f7f\u7528\u793a\u4f8b rv . linear (). setup { } \u51fd\u6570 fun RecyclerView . linear ( @RecyclerView . Orientation orientation : Int = VERTICAL , reverseLayout : Boolean = false ) fun RecyclerView . grid ( spanCount : Int , @RecyclerView . Orientation orientation : Int = VERTICAL , reverseLayout : Boolean = false ) fun RecyclerView . staggered ( spanCount : Int , @RecyclerView . Orientation orientation : Int = VERTICAL )","title":"LayoutManager"},{"location":"ktx/#_1","text":"\u6846\u67b6\u63d0\u4f9b\u5feb\u901f\u8bbe\u7f6e\u5206\u9694\u7269\u6269\u5c55\u51fd\u6570 fun RecyclerView . divider ( @DrawableRes drawable : Int , // \u5206\u9694\u7269Drawable @RecyclerView . Orientation orientation : Int = RecyclerView . VERTICAL , // LayoutManager\u7684\u65b9\u5411 block : (( Rect , View , RecyclerView , RecyclerView . State ) -> Boolean )? = null // getItemOffset\u56de\u8c03\u7528\u4e8e\u8bbe\u7f6e\u95f4\u9694 ) \u793a\u4f8b rv . linear (). divider ( R . drawable . divider_horizontal_padding_15dp ). setup { }","title":"\u5206\u9694\u7269"},{"location":"ktx/#_2","text":"\u901a\u8fc7\u6269\u5c55\u51fd\u6570\u5feb\u901f\u7ed9\u5bf9\u8bdd\u6846\u521b\u5efa\u5217\u8868 Dialog(context).setAdapter(bindingAdapter)","title":"\u5bf9\u8bdd\u6846"},{"location":"listener/","text":"\u51fd\u6570 \u00b6 fun addClickable ( @IdRes vararg id : Int ) // \u9632\u6296\u52a8, 500\u6beb\u79d2\u5185\u65e0\u6cd5\u91cd\u590d\u70b9\u51fb fun addFastClickable ( @IdRes vararg id : Int ) // \u4e0d\u5b58\u5728\u9632\u6296\u52a8, \u53ef\u4ee5\u5feb\u901f\u70b9\u51fb fun addLongClickable ( @IdRes vararg id : Int ) // \u957f\u6309\u4e8b\u4ef6 fun onClick ( @IdRes vararg id : Int , block : BindingViewHolder .( id : Int ) -> Unit ) // \u70b9\u51fb\u4e8b\u4ef6\u56de\u8c03 // id: \u5373\u5c06\u8c03\u7528addClickable\u5148\u6dfb\u52a0Id\u518d\u8bbe\u7f6e\u76d1\u542c\u51fd\u6570 fun onLongClick ( @IdRes vararg id : Int , block : BindingViewHolder .( id : Int ) -> Unit ) // \u957f\u6309\u4e8b\u4ef6\u56de\u8c03 \u793a\u4f8b \u00b6 \u901a\u8fc7\u4f7f\u7528Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u7684\u63a7\u4ef6id\u53ef\u4ee5\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6\u6216\u8005\u957f\u6309\u4e8b\u4ef6 rv_normal.linear().setup { addType<NormalModel>(R.layout.item_multi_type_normal) addClickable(R.id.item) onClick { // Item\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6, \u5c31\u8981\u7ed9Item\u7684\u6839\u5e03\u5c40\u8bbe\u7f6e\u4e00\u4e2aid, \u8fd9\u91cc\u8bbe\u7f6e\u7684\u662fR.id.item } }.models = getData() \u5176\u5b9e\u4e0a\u9762\u4e24\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u6574\u5408\u6210\u4e00\u4e2a, \u8fd9\u91cc\u6f14\u793a\u4e0b\u540c\u65f6\u8bbe\u7f6e\u591a\u4e2aId\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6 rv_normal . linear (). setup { addType < NormalModel >( R . layout . item_multi_type_normal ) onClick ( R . id . item , R . id . btn_submit ) { // it\u5c31\u662f\u4f60\u8bbe\u7f6e\u7684id when ( it ){ R . id . item -> { // Item\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6, \u5c31\u8981\u7ed9Item\u7684\u6839\u5e03\u5c40\u8bbe\u7f6e\u4e00\u4e2aid, \u8fd9\u91cc\u8bbe\u7f6e\u7684\u662fR.id.item } R . id . btn_submit -> { // \u505a\u4efb\u4f55\u4e8b } } } }. models = getData ()","title":"\u76d1\u542c\u4e8b\u4ef6"},{"location":"listener/#_1","text":"fun addClickable ( @IdRes vararg id : Int ) // \u9632\u6296\u52a8, 500\u6beb\u79d2\u5185\u65e0\u6cd5\u91cd\u590d\u70b9\u51fb fun addFastClickable ( @IdRes vararg id : Int ) // \u4e0d\u5b58\u5728\u9632\u6296\u52a8, \u53ef\u4ee5\u5feb\u901f\u70b9\u51fb fun addLongClickable ( @IdRes vararg id : Int ) // \u957f\u6309\u4e8b\u4ef6 fun onClick ( @IdRes vararg id : Int , block : BindingViewHolder .( id : Int ) -> Unit ) // \u70b9\u51fb\u4e8b\u4ef6\u56de\u8c03 // id: \u5373\u5c06\u8c03\u7528addClickable\u5148\u6dfb\u52a0Id\u518d\u8bbe\u7f6e\u76d1\u542c\u51fd\u6570 fun onLongClick ( @IdRes vararg id : Int , block : BindingViewHolder .( id : Int ) -> Unit ) // \u957f\u6309\u4e8b\u4ef6\u56de\u8c03","title":"\u51fd\u6570"},{"location":"listener/#_2","text":"\u901a\u8fc7\u4f7f\u7528Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u7684\u63a7\u4ef6id\u53ef\u4ee5\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6\u6216\u8005\u957f\u6309\u4e8b\u4ef6 rv_normal.linear().setup { addType<NormalModel>(R.layout.item_multi_type_normal) addClickable(R.id.item) onClick { // Item\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6, \u5c31\u8981\u7ed9Item\u7684\u6839\u5e03\u5c40\u8bbe\u7f6e\u4e00\u4e2aid, \u8fd9\u91cc\u8bbe\u7f6e\u7684\u662fR.id.item } }.models = getData() \u5176\u5b9e\u4e0a\u9762\u4e24\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u6574\u5408\u6210\u4e00\u4e2a, \u8fd9\u91cc\u6f14\u793a\u4e0b\u540c\u65f6\u8bbe\u7f6e\u591a\u4e2aId\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6 rv_normal . linear (). setup { addType < NormalModel >( R . layout . item_multi_type_normal ) onClick ( R . id . item , R . id . btn_submit ) { // it\u5c31\u662f\u4f60\u8bbe\u7f6e\u7684id when ( it ){ R . id . item -> { // Item\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6, \u5c31\u8981\u7ed9Item\u7684\u6839\u5e03\u5c40\u8bbe\u7f6e\u4e00\u4e2aid, \u8fd9\u91cc\u8bbe\u7f6e\u7684\u662fR.id.item } R . id . btn_submit -> { // \u505a\u4efb\u4f55\u4e8b } } } }. models = getData ()","title":"\u793a\u4f8b"},{"location":"multi_type/","text":"\u4e0d\u540c\u6570\u636e\u7684\u591a\u7c7b\u578b \u00b6 rv . linear (). setup { addType < Model >( R . layout . item_1 ) addType < Store >( R . layout . item_2 ) }. models = data \u4e0d\u540c\u5b57\u6bb5\u7684\u591a\u7c7b\u578b \u00b6 rv . linear (). setup { addType < Model >{ // \u4f7f\u7528\u5e74\u9f84\u6765\u4f5c\u4e3a\u5224\u65ad\u8fd4\u56de\u4e0d\u540c\u7684\u5e03\u5c40 when ( age ) { 23 -> { R . layout . item_1 } else -> { R . layout . item_2 } } } }. models = data \u533a\u5206\u7c7b\u578b \u00b6 itemViewType \u5c5e\u4e8eonBind\u51fd\u6570\u63a5\u53d7\u8005 BindingViewHolder \u7684\u5b57\u6bb5 rv . linear (). setup { addType < Model >( R . layout . item_1 ) addType < Store >( R . layout . item_2 ) onBind { // when ( itemViewType ) { R . layout . item_1 -> { // \u7c7b\u578b 1 } R . layout . item_2 -> { // \u7c7b\u578b 1 } } } }. models = data","title":"\u591a\u7c7b\u578b"},{"location":"multi_type/#_1","text":"rv . linear (). setup { addType < Model >( R . layout . item_1 ) addType < Store >( R . layout . item_2 ) }. models = data","title":"\u4e0d\u540c\u6570\u636e\u7684\u591a\u7c7b\u578b"},{"location":"multi_type/#_2","text":"rv . linear (). setup { addType < Model >{ // \u4f7f\u7528\u5e74\u9f84\u6765\u4f5c\u4e3a\u5224\u65ad\u8fd4\u56de\u4e0d\u540c\u7684\u5e03\u5c40 when ( age ) { 23 -> { R . layout . item_1 } else -> { R . layout . item_2 } } } }. models = data","title":"\u4e0d\u540c\u5b57\u6bb5\u7684\u591a\u7c7b\u578b"},{"location":"multi_type/#_3","text":"itemViewType \u5c5e\u4e8eonBind\u51fd\u6570\u63a5\u53d7\u8005 BindingViewHolder \u7684\u5b57\u6bb5 rv . linear (). setup { addType < Model >( R . layout . item_1 ) addType < Store >( R . layout . item_2 ) onBind { // when ( itemViewType ) { R . layout . item_1 -> { // \u7c7b\u578b 1 } R . layout . item_2 -> { // \u7c7b\u578b 1 } } } }. models = data","title":"\u533a\u5206\u7c7b\u578b"},{"location":"net/","text":"","title":"\u7f51\u7edc\u8bf7\u6c42"},{"location":"refresh/","text":"BRV\u7684\u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u6269\u5c55\u81ea SmartRefreshLayout , \u652f\u6301\u5176\u6240\u6709\u7279\u6027 \u672c\u5e93\u5df2\u5f15\u5165SmartRefreshLayout, \u65e0\u9700\u518d\u6b21\u5f15\u5165 implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1' SmartRefreshLayout\u7684\u6307\u5b9a\u7684\u5237\u65b0\u5934\u548c\u5237\u65b0\u811a\u5e03\u5c40\u8bf7\u5206\u522b\u4f9d\u8d56(\u5176\u5e93\u5982\u6b64\u8bbe\u8ba1) \u53ef\u9009\u914d\u7f6e\u7684\u5237\u65b0\u5934\u5e03\u5c40\u548c\u811a\u5e03\u5c40 implementation 'androidx.appcompat:appcompat:1.0.0' //\u5fc5\u987b 1.0.0 \u4ee5\u4e0a implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1' //\u6838\u5fc3\u5fc5\u987b\u4f9d\u8d56 implementation 'com.scwang.smart:refresh-header-classics:2.0.1' //\u7ecf\u5178\u5237\u65b0\u5934 implementation 'com.scwang.smart:refresh-header-radar:2.0.1' //\u96f7\u8fbe\u5237\u65b0\u5934 implementation 'com.scwang.smart:refresh-header-falsify:2.0.1' //\u865a\u62df\u5237\u65b0\u5934 implementation 'com.scwang.smart:refresh-header-material:2.0.1' //\u8c37\u6b4c\u5237\u65b0\u5934 (\u5185\u7f6e) implementation 'com.scwang.smart:refresh-header-two-level:2.0.1' //\u4e8c\u7ea7\u5237\u65b0\u5934 implementation 'com.scwang.smart:refresh-footer-ball:2.0.1' //\u7403\u8109\u51b2\u52a0\u8f7d implementation 'com.scwang.smart:refresh-footer-classics:2.0.1' //\u7ecf\u5178\u52a0\u8f7d (\u5185\u7f6e) \u5237\u65b0\u5e03\u5c40\u8981\u6c42\u5fc5\u987b\u5148\u521d\u59cb\u5316, \u63a8\u8350\u5728Application\u4e2d SmartRefreshLayout.setDefaultRefreshHeaderCreator { context, layout -> ClassicsHeader(this) } SmartRefreshLayout.setDefaultRefreshFooterCreator { context, layout -> ClassicsFooter(this) } PageRefreshLayout \u00b6 \u8be5\u63a7\u4ef6\u7ee7\u627f\u81ea SmartRefreshLayout , \u589e\u52a0\u4ee5\u4e0b\u7279\u6027 \u7b80\u5316\u51fd\u6570 \u7ec6\u8282\u4f18\u5316 \u7f3a\u7701\u9875 \u5206\u9875\u52a0\u8f7d \u62c9\u53d6\u52a0\u8f7d\u66f4\u591a \u9884\u52a0\u8f7d / \u9884\u62c9\u53d6 \u521b\u5efa\u65b9\u5f0f \u00b6 \u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u521b\u5efa, \u63a8\u8350\u5e03\u5c40\u5305\u88f9, \u4ee3\u7801\u5305\u88f9 val page = rv.page() \u5e03\u5c40\u5305\u88f9 <com.drake.brv.PageRefreshLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:id= \"@+id/page\" app:stateEnabled= \"true\" android:layout_height= \"match_parent\" tools:context= \"com.drake.brv.sample.fragment.RefreshFragment\" > <androidx.recyclerview.widget.RecyclerView android:id= \"@+id/rv\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </com.drake.brv.PageRefreshLayout> \u76d1\u542c\u72b6\u6001 \u00b6 // \u4e0b\u62c9\u5237\u65b0 page . onRefresh { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } // \u4e0a\u62c9\u52a0\u8f7d page . onLoadMore { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } \u5982\u679c onLoadMore \u4e0d\u8c03\u7528\u5219\u4e0a\u62c9\u52a0\u8f7d\u540c\u6837\u4e5f\u4f1a\u56de\u8c03 onRefresh \u51fd\u6570, \u56e0\u4e3a\u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u5728\u4e00\u822c\u63a5\u53e3\u4e2d\u5b9a\u4e49\u53ea\u662f\u5206\u9875\u5b57\u6bb5\u4e0d\u4e00\u6837 \u7f3a\u7701\u9875 \u00b6 \u89e6\u53d1\u5237\u65b0\u72b6\u6001(\u4e24\u8005\u90fd\u4f1a\u56de\u8c03\u51fd\u6570onRefresh) autoRefesh \u4e0b\u62c9\u5237\u65b0 showLoading \u52a0\u8f7dLoading\u7f3a\u7701\u9875, \u5f53\u7136\u5f97\u5148\u8bbe\u7f6e loadingLayout (\u6216\u8005\u8bfb\u53d6 StateConfig \u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e) refresh \u9759\u9ed8\u5237\u65b0, \u4e0d\u4f1a\u89e6\u53d1\u4efb\u4f55\u52a8\u753b \u8fd93\u79cd\u65b9\u5f0f\u90fd\u4f1a\u5bfc\u81f4\u7d22\u5f15 index=startIndex \u91cd\u7f6e. \u7f3a\u7701\u9875\u72b6\u6001\u63a7\u5236 showEmpty() showError() showContent showLoading() \u914d\u7f6e\u5168\u5c40\u7f3a\u7701\u9875 \u8fd9\u5757\u4ee3\u7801\u548cStateLayout\u516c\u7528 /** * \u63a8\u8350\u5728Application\u4e2d\u8fdb\u884c\u5168\u5c40\u914d\u7f6e\u7f3a\u7701\u9875, \u5f53\u7136\u540c\u6837\u6bcf\u4e2a\u9875\u9762\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u7f3a\u7701\u9875. * \u5177\u4f53\u67e5\u770b https://github.com/liangjingkanji/StateLayout */ StateConfig . apply { emptyLayout = R . layout . layout_empty errorLayout = R . layout . layout_error loadingLayout = R . layout . layout_loading onLoading { // \u6b64\u751f\u547d\u5468\u671f\u53ef\u4ee5\u62ff\u5230LoadingLayout\u521b\u5efa\u7684\u89c6\u56fe\u5bf9\u8c61, \u53ef\u4ee5\u8fdb\u884c\u52a8\u753b\u8bbe\u7f6e\u6216\u70b9\u51fb\u4e8b\u4ef6. } } \u5355\u4f8b\u7f3a\u7701\u9875\u914d\u7f6e\u652f\u6301\u4e24\u79cd\u65b9\u5f0f XML <com.drake.brv.PageRefreshLayout ..... app:error_layout= \"@layout/layout_error\" app:empty_layout= \"@layout/layout_empty\" app:loading_layout= \"@layout/layout_loading\" > \u4ee3\u7801 page . apply { loadingLayout = R . layout . layout_loading emptyLayout = R . layout . layout_empty errorLayout = R . layout . layout_error } \u9ed8\u8ba4\u4f1a\u4f7f\u7528\u7f3a\u7701\u9875, \u5982\u679c\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u5168\u5c40\u7f3a\u7701\u9875\u4f46\u662f\u6b64\u523b\u4e0d\u60f3\u4f7f\u7528. \u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027|\u51fd\u6570: stateEnabled \u60f3\u8981\u4f7f\u7528\u7f3a\u7701\u9875\u53c8\u8981\u6c42\u7f3a\u7701\u9875\u4e0d\u906e\u76d6\u5934\u5e03\u5c40, \u5934\u5e03\u5c40\u8bf7\u4f7f\u7528 CoordinatorLayout \u5b9e\u73b0. \u6ce8\u610f\u4f7f\u7528 NestedScrollView \u4f1a\u5bfc\u81f4rv\u4e00\u6b21\u6027\u52a0\u8f7d\u5b8citem\u5185\u5b58\u6d88\u8017\u5927. \u5237\u65b0\u6570\u636e \u00b6 \u524d\u9762\u63d0\u5230 PageRefreshLayout \u652f\u6301\u81ea\u52a8\u5206\u9875\u52a0\u8f7d // \u8bbe\u7f6e\u5206\u9875\u52a0\u8f7d\u7b2c\u4e00\u9875\u7684\u7d22\u5f15, \u9ed8\u8ba4=1, \u89e6\u53d1\u5237\u65b0\u4f1a\u91cd\u7f6e\u7d22\u5f15. \u5982\u679c\u9700\u8981\u4fee\u6539\u5728Application\u8bbe\u7f6e\u4e00\u6b21\u5373\u53ef // PageRefreshLayout.startIndex = 1 pageLayout . onRefresh { // \u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u90fd\u4f1a\u6267\u884c\u8fd9\u4e2a\u7f51\u7edc\u8bf7\u6c42, \u9664\u975e\u53e6\u5916\u8bbe\u7f6eonLoadMore get ( \"/path\" ) { param ( \"key\" , \"value\" ) param ( \"page\" , pageLayout . index ) // \u8fd9\u91cc\u4f7f\u7528\u6846\u67b6\u63d0\u4f9b\u7684\u5c5e\u6027 }. page ( this ) { // \u8be5\u56de\u8c03\u51fd\u6570\u53c2\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7528\u4e8e\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e0b\u4e00\u9875, \u51b3\u5b9a\u4e0a\u62c9\u52a0\u8f7d\u7684\u72b6\u6001. \u4ee5\u53ca\u5f53\u524d\u5c5e\u4e8e\u5237\u65b0\u8fd8\u662f\u52a0\u8f7d\u66f4\u591a\u6761\u76ee addData ( data ){ adapter . itemCount < data . count // \u8fd9\u91cc\u662f\u5224\u65ad\u662f\u5426\u7531\u66f4\u591a\u9875, \u5177\u4f53\u903b\u8f91\u6839\u636e\u63a5\u53e3\u5b9a\u4e49 } } } \u8fd9\u91cc\u7684\u7f51\u7edc\u8bf7\u6c42\u4f7f\u7528\u7684\u662f\u6211\u5f00\u6e90\u7684\u53e6\u4e00\u4e2a\u9879\u76eeNet, \u652f\u6301\u6269\u5c55BRV. GitHub: Net .","title":"\u4e0b\u62c9\u5237\u65b0/\u4e0a\u62c9\u52a0\u8f7d"},{"location":"refresh/#pagerefreshlayout","text":"\u8be5\u63a7\u4ef6\u7ee7\u627f\u81ea SmartRefreshLayout , \u589e\u52a0\u4ee5\u4e0b\u7279\u6027 \u7b80\u5316\u51fd\u6570 \u7ec6\u8282\u4f18\u5316 \u7f3a\u7701\u9875 \u5206\u9875\u52a0\u8f7d \u62c9\u53d6\u52a0\u8f7d\u66f4\u591a \u9884\u52a0\u8f7d / \u9884\u62c9\u53d6","title":"PageRefreshLayout"},{"location":"refresh/#_1","text":"\u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u521b\u5efa, \u63a8\u8350\u5e03\u5c40\u5305\u88f9, \u4ee3\u7801\u5305\u88f9 val page = rv.page() \u5e03\u5c40\u5305\u88f9 <com.drake.brv.PageRefreshLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:id= \"@+id/page\" app:stateEnabled= \"true\" android:layout_height= \"match_parent\" tools:context= \"com.drake.brv.sample.fragment.RefreshFragment\" > <androidx.recyclerview.widget.RecyclerView android:id= \"@+id/rv\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </com.drake.brv.PageRefreshLayout>","title":"\u521b\u5efa\u65b9\u5f0f"},{"location":"refresh/#_2","text":"// \u4e0b\u62c9\u5237\u65b0 page . onRefresh { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } // \u4e0a\u62c9\u52a0\u8f7d page . onLoadMore { // \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7b49\u5f02\u6b65\u64cd\u4f5c } \u5982\u679c onLoadMore \u4e0d\u8c03\u7528\u5219\u4e0a\u62c9\u52a0\u8f7d\u540c\u6837\u4e5f\u4f1a\u56de\u8c03 onRefresh \u51fd\u6570, \u56e0\u4e3a\u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u5728\u4e00\u822c\u63a5\u53e3\u4e2d\u5b9a\u4e49\u53ea\u662f\u5206\u9875\u5b57\u6bb5\u4e0d\u4e00\u6837","title":"\u76d1\u542c\u72b6\u6001"},{"location":"refresh/#_3","text":"\u89e6\u53d1\u5237\u65b0\u72b6\u6001(\u4e24\u8005\u90fd\u4f1a\u56de\u8c03\u51fd\u6570onRefresh) autoRefesh \u4e0b\u62c9\u5237\u65b0 showLoading \u52a0\u8f7dLoading\u7f3a\u7701\u9875, \u5f53\u7136\u5f97\u5148\u8bbe\u7f6e loadingLayout (\u6216\u8005\u8bfb\u53d6 StateConfig \u5168\u5c40\u7f3a\u7701\u9875\u914d\u7f6e) refresh \u9759\u9ed8\u5237\u65b0, \u4e0d\u4f1a\u89e6\u53d1\u4efb\u4f55\u52a8\u753b \u8fd93\u79cd\u65b9\u5f0f\u90fd\u4f1a\u5bfc\u81f4\u7d22\u5f15 index=startIndex \u91cd\u7f6e. \u7f3a\u7701\u9875\u72b6\u6001\u63a7\u5236 showEmpty() showError() showContent showLoading() \u914d\u7f6e\u5168\u5c40\u7f3a\u7701\u9875 \u8fd9\u5757\u4ee3\u7801\u548cStateLayout\u516c\u7528 /** * \u63a8\u8350\u5728Application\u4e2d\u8fdb\u884c\u5168\u5c40\u914d\u7f6e\u7f3a\u7701\u9875, \u5f53\u7136\u540c\u6837\u6bcf\u4e2a\u9875\u9762\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u7f3a\u7701\u9875. * \u5177\u4f53\u67e5\u770b https://github.com/liangjingkanji/StateLayout */ StateConfig . apply { emptyLayout = R . layout . layout_empty errorLayout = R . layout . layout_error loadingLayout = R . layout . layout_loading onLoading { // \u6b64\u751f\u547d\u5468\u671f\u53ef\u4ee5\u62ff\u5230LoadingLayout\u521b\u5efa\u7684\u89c6\u56fe\u5bf9\u8c61, \u53ef\u4ee5\u8fdb\u884c\u52a8\u753b\u8bbe\u7f6e\u6216\u70b9\u51fb\u4e8b\u4ef6. } } \u5355\u4f8b\u7f3a\u7701\u9875\u914d\u7f6e\u652f\u6301\u4e24\u79cd\u65b9\u5f0f XML <com.drake.brv.PageRefreshLayout ..... app:error_layout= \"@layout/layout_error\" app:empty_layout= \"@layout/layout_empty\" app:loading_layout= \"@layout/layout_loading\" > \u4ee3\u7801 page . apply { loadingLayout = R . layout . layout_loading emptyLayout = R . layout . layout_empty errorLayout = R . layout . layout_error } \u9ed8\u8ba4\u4f1a\u4f7f\u7528\u7f3a\u7701\u9875, \u5982\u679c\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u5168\u5c40\u7f3a\u7701\u9875\u4f46\u662f\u6b64\u523b\u4e0d\u60f3\u4f7f\u7528. \u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027|\u51fd\u6570: stateEnabled \u60f3\u8981\u4f7f\u7528\u7f3a\u7701\u9875\u53c8\u8981\u6c42\u7f3a\u7701\u9875\u4e0d\u906e\u76d6\u5934\u5e03\u5c40, \u5934\u5e03\u5c40\u8bf7\u4f7f\u7528 CoordinatorLayout \u5b9e\u73b0. \u6ce8\u610f\u4f7f\u7528 NestedScrollView \u4f1a\u5bfc\u81f4rv\u4e00\u6b21\u6027\u52a0\u8f7d\u5b8citem\u5185\u5b58\u6d88\u8017\u5927.","title":"\u7f3a\u7701\u9875"},{"location":"refresh/#_4","text":"\u524d\u9762\u63d0\u5230 PageRefreshLayout \u652f\u6301\u81ea\u52a8\u5206\u9875\u52a0\u8f7d // \u8bbe\u7f6e\u5206\u9875\u52a0\u8f7d\u7b2c\u4e00\u9875\u7684\u7d22\u5f15, \u9ed8\u8ba4=1, \u89e6\u53d1\u5237\u65b0\u4f1a\u91cd\u7f6e\u7d22\u5f15. \u5982\u679c\u9700\u8981\u4fee\u6539\u5728Application\u8bbe\u7f6e\u4e00\u6b21\u5373\u53ef // PageRefreshLayout.startIndex = 1 pageLayout . onRefresh { // \u4e0b\u62c9\u5237\u65b0\u548c\u4e0a\u62c9\u52a0\u8f7d\u90fd\u4f1a\u6267\u884c\u8fd9\u4e2a\u7f51\u7edc\u8bf7\u6c42, \u9664\u975e\u53e6\u5916\u8bbe\u7f6eonLoadMore get ( \"/path\" ) { param ( \"key\" , \"value\" ) param ( \"page\" , pageLayout . index ) // \u8fd9\u91cc\u4f7f\u7528\u6846\u67b6\u63d0\u4f9b\u7684\u5c5e\u6027 }. page ( this ) { // \u8be5\u56de\u8c03\u51fd\u6570\u53c2\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7528\u4e8e\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e0b\u4e00\u9875, \u51b3\u5b9a\u4e0a\u62c9\u52a0\u8f7d\u7684\u72b6\u6001. \u4ee5\u53ca\u5f53\u524d\u5c5e\u4e8e\u5237\u65b0\u8fd8\u662f\u52a0\u8f7d\u66f4\u591a\u6761\u76ee addData ( data ){ adapter . itemCount < data . count // \u8fd9\u91cc\u662f\u5224\u65ad\u662f\u5426\u7531\u66f4\u591a\u9875, \u5177\u4f53\u903b\u8f91\u6839\u636e\u63a5\u53e3\u5b9a\u4e49 } } } \u8fd9\u91cc\u7684\u7f51\u7edc\u8bf7\u6c42\u4f7f\u7528\u7684\u662f\u6211\u5f00\u6e90\u7684\u53e6\u4e00\u4e2a\u9879\u76eeNet, \u652f\u6301\u6269\u5c55BRV. GitHub: Net .","title":"\u5237\u65b0\u6570\u636e"},{"location":"state/","text":"\u9884\u89c8 \u00b6 BRV\u7684\u7f3a\u7701\u9875\u5b9e\u73b0\u4f7f\u7528 StateLayout , \u8be5\u5e93\u652f\u6301\u4efb\u610f Activity | Fragment | View \u5b9e\u73b0\u7f3a\u7701\u9875\u529f\u80fd. \u4e3b\u8981\u7279\u70b9 \u5168\u5c40\u914d\u7f6e \u5355\u4f8b\u914d\u7f6e \u751f\u547d\u5468\u671f(\u53ef\u4ee5\u52a0\u8f7d\u52a8\u753b\u6216\u8005\u5904\u7406\u4e8b\u4ef6) \u652f\u6301activity/fragment/view\u66ff\u6362 \u652f\u6301\u4ee3\u7801\u6216\u8005XML\u5b9e\u73b0 \u65e0\u7f51\u7edc\u60c5\u51b5\u4e0bshowLoading\u663e\u793a\u9519\u8bef\u5e03\u5c40, \u6709\u7f51\u5219\u663e\u793a\u52a0\u8f7d\u4e2d\u5e03\u5c40 \u672c\u5e93\u5df2\u7ecf\u4f9d\u8d56, \u65e0\u9700\u518d\u6b21\u4f9d\u8d56. \u4f7f\u7528\u65b9\u6cd5\u89c1 StateLayout\u7684 GitHub \u5173\u4e8e\u4e0b\u62c9\u5237\u65b0\u4e0a\u62c9\u52a0\u8f7d\u7684\u7f3a\u7701\u9875\u5c55\u793a // \u521b\u5efa\u5217\u8868 rv . linear (). setup { addType < Model >( R . layout . item_multi_type_simple ) addType < DoubleItemModel >( R . layout . item_multi_type_two ) } // \u4e0b\u62c9\u5237\u65b0\u8bf7\u6c42\u6570\u636e page . onRefresh { postDelayed ({ // \u6a21\u62df\u7f51\u7edc\u8bf7\u6c42, \u521b\u5efa\u5047\u7684\u6570\u636e\u96c6 val data = getData () addData ( data ) { index < total // \u901a\u8fc7\u5224\u65ad\u662f\u5426\u6709\u66f4\u591a\u9875 } }, 2000 ) toast ( \"\u53f3\u4e0a\u89d2\u83dc\u5355\u53ef\u4ee5\u64cd\u4f5c\u5237\u65b0\u7ed3\u679c, \u9ed8\u8ba42s\u7ed3\u675f\" ) }. autoRefresh ()","title":"\u7f3a\u7701\u9875"},{"location":"state/#_1","text":"BRV\u7684\u7f3a\u7701\u9875\u5b9e\u73b0\u4f7f\u7528 StateLayout , \u8be5\u5e93\u652f\u6301\u4efb\u610f Activity | Fragment | View \u5b9e\u73b0\u7f3a\u7701\u9875\u529f\u80fd. \u4e3b\u8981\u7279\u70b9 \u5168\u5c40\u914d\u7f6e \u5355\u4f8b\u914d\u7f6e \u751f\u547d\u5468\u671f(\u53ef\u4ee5\u52a0\u8f7d\u52a8\u753b\u6216\u8005\u5904\u7406\u4e8b\u4ef6) \u652f\u6301activity/fragment/view\u66ff\u6362 \u652f\u6301\u4ee3\u7801\u6216\u8005XML\u5b9e\u73b0 \u65e0\u7f51\u7edc\u60c5\u51b5\u4e0bshowLoading\u663e\u793a\u9519\u8bef\u5e03\u5c40, \u6709\u7f51\u5219\u663e\u793a\u52a0\u8f7d\u4e2d\u5e03\u5c40 \u672c\u5e93\u5df2\u7ecf\u4f9d\u8d56, \u65e0\u9700\u518d\u6b21\u4f9d\u8d56. \u4f7f\u7528\u65b9\u6cd5\u89c1 StateLayout\u7684 GitHub \u5173\u4e8e\u4e0b\u62c9\u5237\u65b0\u4e0a\u62c9\u52a0\u8f7d\u7684\u7f3a\u7701\u9875\u5c55\u793a // \u521b\u5efa\u5217\u8868 rv . linear (). setup { addType < Model >( R . layout . item_multi_type_simple ) addType < DoubleItemModel >( R . layout . item_multi_type_two ) } // \u4e0b\u62c9\u5237\u65b0\u8bf7\u6c42\u6570\u636e page . onRefresh { postDelayed ({ // \u6a21\u62df\u7f51\u7edc\u8bf7\u6c42, \u521b\u5efa\u5047\u7684\u6570\u636e\u96c6 val data = getData () addData ( data ) { index < total // \u901a\u8fc7\u5224\u65ad\u662f\u5426\u6709\u66f4\u591a\u9875 } }, 2000 ) toast ( \"\u53f3\u4e0a\u89d2\u83dc\u5355\u53ef\u4ee5\u64cd\u4f5c\u5237\u65b0\u7ed3\u679c, \u9ed8\u8ba42s\u7ed3\u675f\" ) }. autoRefresh ()","title":"\u9884\u89c8"},{"location":"toggle/","text":"\u5207\u6362\u6a21\u5f0f \u00b6 \u5207\u6362\u6a21\u5f0f\u76f8\u5f53\u4e8e\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u904d\u5386\u6240\u6709\u7684item, \u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u91cc\u9762\u4f9d\u6b21\u5237\u65b0\u4ed6\u4eec. \u5e38\u7528\u4e8e\u5207\u6362\u9009\u62e9\u6a21\u5f0f. fun toggle () // \u5207\u6362\u6a21\u5f0f fun getToggleMode (): Boolean // \u8303\u56f4\u5f53\u524d\u51fa\u4f55\u79cd\u5207\u6362\u6a21\u5f0f fun setToggleMode ( toggleMode : Boolean ) // \u8bbe\u7f6e\u5207\u6362\u6a21\u5f0f, \u5982\u679c\u8bbe\u7f6e\u7684\u662f\u5f53\u524d\u6b63\u5904\u4e8e\u7684\u6a21\u5f0f\u4e0d\u4f1a\u89e6\u53d1\u56de\u8c03 \u56de\u8c03\u51fd\u6570 onToggle { type , position , toggleMode -> // \u7c7b\u578b \u4f4d\u7f6e \u5207\u6362\u5e03\u5c14\u503c // \u5728\u8fd9\u91cc\u53ef\u4ee5\u7ed9item\u5237\u65b0\u6210\u9009\u62e9\u6a21\u5f0f } // \u5207\u6362\u5b8c\u6210 onToggleEnd { // \u4f8b\u5982\u5207\u6362\u5de5\u5177\u680f\u4e3a\u9009\u62e9\u6a21\u5f0f }","title":"\u5207\u6362\u6a21\u5f0f"},{"location":"toggle/#_1","text":"\u5207\u6362\u6a21\u5f0f\u76f8\u5f53\u4e8e\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u904d\u5386\u6240\u6709\u7684item, \u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u91cc\u9762\u4f9d\u6b21\u5237\u65b0\u4ed6\u4eec. \u5e38\u7528\u4e8e\u5207\u6362\u9009\u62e9\u6a21\u5f0f. fun toggle () // \u5207\u6362\u6a21\u5f0f fun getToggleMode (): Boolean // \u8303\u56f4\u5f53\u524d\u51fa\u4f55\u79cd\u5207\u6362\u6a21\u5f0f fun setToggleMode ( toggleMode : Boolean ) // \u8bbe\u7f6e\u5207\u6362\u6a21\u5f0f, \u5982\u679c\u8bbe\u7f6e\u7684\u662f\u5f53\u524d\u6b63\u5904\u4e8e\u7684\u6a21\u5f0f\u4e0d\u4f1a\u89e6\u53d1\u56de\u8c03 \u56de\u8c03\u51fd\u6570 onToggle { type , position , toggleMode -> // \u7c7b\u578b \u4f4d\u7f6e \u5207\u6362\u5e03\u5c14\u503c // \u5728\u8fd9\u91cc\u53ef\u4ee5\u7ed9item\u5237\u65b0\u6210\u9009\u62e9\u6a21\u5f0f } // \u5207\u6362\u5b8c\u6210 onToggleEnd { // \u4f8b\u5982\u5207\u6362\u5de5\u5177\u680f\u4e3a\u9009\u62e9\u6a21\u5f0f }","title":"\u5207\u6362\u6a21\u5f0f"},{"location":"upfetch/","text":"","title":"\u62c9\u53d6\u66f4\u591a"},{"location":"use/","text":"\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868 \u00b6 rv_simple . linear (). setup { addType < SimpleModel >( R . layout . item_simple ) }. models = getData () \u5217\u8868\u586b\u5145\u6570\u636e \u00b6 BRV\u652f\u6301\u4e09\u79cd\u65b9\u5f0f, \u7075\u6d3b\u4f7f\u7528; \u8fd9\u91cc\u63d0\u53ca\u7684Model\u5c31\u7b49\u540c\u4e8e\u6570\u636e\u7c7b/JavaBean/POJO \u51fd\u6570\u56de\u8c03 \u00b6 \u5728 onBind \u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e rv_simple . linear (). setup { addType < SimpleModel >( R . layout . item_simple ) onBind { findView < TextView >( R . id . tv_simple ). text = getModel < SimpleModel >(). name } }. models = getData () \u5b9e\u73b0\u63a5\u53e3 \u00b6 \u901a\u8fc7\u4e3aModel\u5b9e\u73b0\u63a5\u53e3 ItemBind , \u5b9e\u73b0\u51fd\u6570 onBind , \u5728\u8be5\u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e; \u8fd9\u79cd\u65b9\u5f0f\u5728\u5f88\u591a\u6846\u67b6\u4e2d\u88ab\u5e94\u7528, \u4f8b\u5982BRVAH, \u4f46\u662f\u6211\u4e0d\u63a8\u8350\u8fd9\u79cd\u89c6\u56fe\u5728Model\u4e2d\u7ed1\u5b9a\u7684\u65b9\u5f0f, \u56e0\u4e3aModel\u5e94\u5f53\u53ea\u5b58\u50a8\u6570\u636e\u548c\u8ba1\u7b97\u903b\u8f91, \u4e0d\u5e94\u5305\u542b\u4efb\u4f55UI class SimpleModel ( var name : String = \"BRV\" ) : ItemBind { override fun onBind ( holder : BindingAdapter . BindingViewHolder ) { val appName = holder . context . getString ( R . string . app_name ) holder . findView < TextView >( R . id . tv_simple ). text = appName + itemPosition } } DataBinding \u00b6 \u901a\u8fc7DataBinding\u6570\u636e\u7ed1\u5b9a\u5f62\u5f0f\u81ea\u52a8\u586b\u5145\u6570\u636e, \u63a8\u8350, \u8fd9\u662f\u4ee3\u7801\u91cf\u6700\u5c11\u6700\u7075\u6d3b\u7684\u4e00\u79cd\u65b9\u5f0f \u7b2c\u4e00\u6b65\u542f\u7528DataBinding, \u5728module\u4e2d\u7684build.gradle\u6587\u4ef6\u4e2d android { /.../ dataBinding { enabled = true } } \u7b2c\u4e8c\u90e8\u5e94\u5f53\u5728Application\u4e2d\u6ce8\u518c\u4e00\u4e2a\u5168\u5c40\u7684ID(\u8bb0\u4f4f\u5728 AndroidManifest \u6ce8\u518c\u8be5Application) class App : Application () { override fun onCreate () { super . onCreate () // \u521d\u59cb\u5316BindingAdapter\u7684\u9ed8\u8ba4\u7ed1\u5b9aID BRV . modelId = BR . m } } \u7b2c\u4e09\u6b65, \u5728Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u521b\u5efa\u53d8\u91cf, \u7136\u540e\u7ed1\u5b9a\u53d8\u91cf\u5230\u89c6\u56fe\u63a7\u4ef6\u4e0a <layout xmlns:android= \"http://schemas.android.com/apk/res/android\" > <data> <variable name= \"m\" type= \"com.drake.brv.sample.model.SimpleModel\" /> </data> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <FrameLayout android:id= \"@+id/item\" android:layout_width= \"match_parent\" android:layout_height= \"100dp\" android:layout_margin= \"16dp\" android:background= \"@drawable/bg_card\" android:foreground= \"?selectableItemBackgroundBorderless\" > <TextView android:id= \"@+id/tv_simple\" android:text= \"@{String.valueOf(m.name)}\" android:gravity= \"center\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </FrameLayout> </LinearLayout> </layout> \u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u5217\u8868\u65e0\u9700\u5904\u7406\u6570\u636e rv_simple . linear (). setup { addType < SimpleModel >( R . layout . item_simple ) }. models = getData () \u522b\u770b\u6587\u6863\u4e2d\u7b2c\u4e09\u79cd\u65b9\u5f0f\u590d\u6742, \u5b9e\u9645\u7b2c\u4e09\u79cd\u65b9\u5f0f\u4ee3\u7801\u91cf\u6700\u5c11, \u540c\u65f6\u6700\u89e3\u8026","title":"\u4f7f\u7528"},{"location":"use/#_1","text":"rv_simple . linear (). setup { addType < SimpleModel >( R . layout . item_simple ) }. models = getData ()","title":"\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868"},{"location":"use/#_2","text":"BRV\u652f\u6301\u4e09\u79cd\u65b9\u5f0f, \u7075\u6d3b\u4f7f\u7528; \u8fd9\u91cc\u63d0\u53ca\u7684Model\u5c31\u7b49\u540c\u4e8e\u6570\u636e\u7c7b/JavaBean/POJO","title":"\u5217\u8868\u586b\u5145\u6570\u636e"},{"location":"use/#_3","text":"\u5728 onBind \u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e rv_simple . linear (). setup { addType < SimpleModel >( R . layout . item_simple ) onBind { findView < TextView >( R . id . tv_simple ). text = getModel < SimpleModel >(). name } }. models = getData ()","title":"\u51fd\u6570\u56de\u8c03"},{"location":"use/#_4","text":"\u901a\u8fc7\u4e3aModel\u5b9e\u73b0\u63a5\u53e3 ItemBind , \u5b9e\u73b0\u51fd\u6570 onBind , \u5728\u8be5\u51fd\u6570\u4e2d\u586b\u5145\u6570\u636e; \u8fd9\u79cd\u65b9\u5f0f\u5728\u5f88\u591a\u6846\u67b6\u4e2d\u88ab\u5e94\u7528, \u4f8b\u5982BRVAH, \u4f46\u662f\u6211\u4e0d\u63a8\u8350\u8fd9\u79cd\u89c6\u56fe\u5728Model\u4e2d\u7ed1\u5b9a\u7684\u65b9\u5f0f, \u56e0\u4e3aModel\u5e94\u5f53\u53ea\u5b58\u50a8\u6570\u636e\u548c\u8ba1\u7b97\u903b\u8f91, \u4e0d\u5e94\u5305\u542b\u4efb\u4f55UI class SimpleModel ( var name : String = \"BRV\" ) : ItemBind { override fun onBind ( holder : BindingAdapter . BindingViewHolder ) { val appName = holder . context . getString ( R . string . app_name ) holder . findView < TextView >( R . id . tv_simple ). text = appName + itemPosition } }","title":"\u5b9e\u73b0\u63a5\u53e3"},{"location":"use/#databinding","text":"\u901a\u8fc7DataBinding\u6570\u636e\u7ed1\u5b9a\u5f62\u5f0f\u81ea\u52a8\u586b\u5145\u6570\u636e, \u63a8\u8350, \u8fd9\u662f\u4ee3\u7801\u91cf\u6700\u5c11\u6700\u7075\u6d3b\u7684\u4e00\u79cd\u65b9\u5f0f \u7b2c\u4e00\u6b65\u542f\u7528DataBinding, \u5728module\u4e2d\u7684build.gradle\u6587\u4ef6\u4e2d android { /.../ dataBinding { enabled = true } } \u7b2c\u4e8c\u90e8\u5e94\u5f53\u5728Application\u4e2d\u6ce8\u518c\u4e00\u4e2a\u5168\u5c40\u7684ID(\u8bb0\u4f4f\u5728 AndroidManifest \u6ce8\u518c\u8be5Application) class App : Application () { override fun onCreate () { super . onCreate () // \u521d\u59cb\u5316BindingAdapter\u7684\u9ed8\u8ba4\u7ed1\u5b9aID BRV . modelId = BR . m } } \u7b2c\u4e09\u6b65, \u5728Item\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u521b\u5efa\u53d8\u91cf, \u7136\u540e\u7ed1\u5b9a\u53d8\u91cf\u5230\u89c6\u56fe\u63a7\u4ef6\u4e0a <layout xmlns:android= \"http://schemas.android.com/apk/res/android\" > <data> <variable name= \"m\" type= \"com.drake.brv.sample.model.SimpleModel\" /> </data> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <FrameLayout android:id= \"@+id/item\" android:layout_width= \"match_parent\" android:layout_height= \"100dp\" android:layout_margin= \"16dp\" android:background= \"@drawable/bg_card\" android:foreground= \"?selectableItemBackgroundBorderless\" > <TextView android:id= \"@+id/tv_simple\" android:text= \"@{String.valueOf(m.name)}\" android:gravity= \"center\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </FrameLayout> </LinearLayout> </layout> \u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u5217\u8868\u65e0\u9700\u5904\u7406\u6570\u636e rv_simple . linear (). setup { addType < SimpleModel >( R . layout . item_simple ) }. models = getData () \u522b\u770b\u6587\u6863\u4e2d\u7b2c\u4e09\u79cd\u65b9\u5f0f\u590d\u6742, \u5b9e\u9645\u7b2c\u4e09\u79cd\u65b9\u5f0f\u4ee3\u7801\u91cf\u6700\u5c11, \u540c\u65f6\u6700\u89e3\u8026","title":"DataBinding"}]}